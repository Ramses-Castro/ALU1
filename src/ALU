`default_nettype none

module ALU_Displays (
    input  wire [2:0] ui_in,  // in1
    output wire [3:0] uo_out, // select disp
    input  wire [2:0] uio_in, // in2
    output wire [6:0] uio_out,  // segmentos (AE-GE)
    input  wire       ena, // error  // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);

    // Señales internas
    wire [3:0] num1mux;
    wire [3:0] num2mux;
    wire zerow;
    wire errorw;
    wire [3:0] select_disp;
    wire [3:0] multiplexed_output;

    // Instancia del módulo ALU con ancho ajustado a WIDTH = 3
    ALU #(.WIDTH(3)) Etapa0 (
        .in1(uio_in[2:0]),      // Entrada A
        .in2(uio_in[5:3]),      // Entrada B
        .op(ui_in[1:0]),        // Código de operación
        .dec_bin(num1mux),      // Salida decenas
        .unis_bin(num2mux),     // Salida unidades
        .zero(zerow),           // Señal de resultado cero
        .error(errorw)          // Señal de error
    );

    // Divisor de frecuencia
    Divisor_frec Etapa2 (
        .mclk(clk),
        .q_int1(select_disp[0]),
        .q_int2(select_disp[1])
    );

    // Instancia del módulo Multiplexor2_1
    Multiplexor2_1 Etapa1 (
        .J(num1mux),           // Entrada J
        .K(num2mux),           // Entrada K
        .EL(select_disp[1]),   // Señal de control
        .SA(multiplexed_output) // Salida del multiplexor
    );

    // Conexión de multiplexed_output a los segmentos
    assign uio_out[6:0] = multiplexed_output;

    // Asignaciones de control
    assign select_disp[2] = 1;
    assign select_disp[3] = 1;
    assign uo_out[7] = zerow;    // Señal zero en uo_out[7]
    assign uio_out[7] = errorw;  // Señal error en uio_out[7]
    assign uio_oe = 8'b11111111; // Configura uio_out como salida

endmodule

// Módulo de multiplexor 2 a 1
module Multiplexor2_1 (
    input [3:0] J,      // Entrada J de 4 bits
    input [3:0] K,      // Entrada K de 4 bits
    input EL,           // Señal de control (selector)
    output [3:0] SA     // Salida de 4 bits
);

    assign SA = (EL == 1'b0) ? J : K;  // Selección de la salida con base en EL

endmodule











